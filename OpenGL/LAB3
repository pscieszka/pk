/* System */
#include<windows.h>
#include<stdio.h>
#include<math.h>
/* Biblioteka GLUT */
#include "glut.h"


/* Deklaracje funkcji narzędziowych */

/* Funkcja do rysowania */
void DrawScene(void);
/* Prototyp fukcji rysującej osie ukłądu */
void DrawSceneAxes(void);

/* Funkcja do inicjacji OpenGLa */
void InitOpenGL(void);

/* Funkcja wywoływana w momentach zmiany rozmiarów okna */
void ReshapeWindow(int width, int height);

void MouseMotion(GLsizei x, GLsizei y);

void MouseFunc(int button, int state, int x, int y);
/* Deklaracja globalnych zmiennych */

/* Kąt obrotu czajnika */
GLfloat theta = 0.0f;
GLfloat theta2= 0.0f;

/* Przelicznik pixeli na kąt */
GLfloat pixels2angle = 0.0;
/* Status lewego przycisku myszy:
zwolniony
wciśnięty */
GLint lbutton_status = 0;
GLint rbutton_status = 0;


/* Ostatnia pozycja kursora myszy */
GLint x_last_pos = 0;
GLint y_last_pos = 0;
GLfloat scale = 0;

/* Przemieszczenie kursora */
GLint x_delta = 0;
GLint y_delta = 0;


/* Pozycja obserwatora */
GLfloat viewer_pos[] = { 4.0, -4.0, 10.0 };

/* Globalny identyfikator głównego okna programu */
int mainWindow;

/* Funkcja main */
int main(int argc, char** argv)
{
	// Inicjujemy bibliotekę GLUT
	glutInit(&argc, argv);
	// Inicjujemy: format koloru, dwa bufoy ramki
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);
	// Ustawiamy początkowe wymiary okna
	glutInitWindowSize(800, 600);
	// Ustawiamy pozycję okna - lewy górny narożnik
	glutInitWindowPosition(150, 150);
	// Tworzymy główne okno programu
	mainWindow = glutCreateWindow("Transformacje czajnikowe");

	// Sprawdzamy powodzenie operacji
	if (mainWindow == 0) {
		puts("Nie mozna stworzyc okna!!!\nWyjscie z programu.\n");
		exit(-1);
	}
	// Czynimy aktywnym okno główne programu
	glutSetWindow(mainWindow);

	// Tutaj rejestrujemy funkcje narzędziowe - tzw. callbacks
	glutDisplayFunc(DrawScene);
	glutReshapeFunc(ReshapeWindow);

	// Rejestracja funkcji odpowiedzialnej stan myszy
	glutMouseFunc(MouseFunc);
	// Rejestracja funkcji odpowiedzialnej za ruch myszy
	glutMotionFunc(MouseMotion);

	// Ustawienia początkowe
	InitOpenGL();

	// Włączamy mechanizm usuwania niewidocznych powierzchni
	glEnable(GL_DEPTH_TEST);

	// Wejście do pętli programu
	glutMainLoop();

	return(0);
}

/* W tej funkcji określamy to co ma byc narysowane na ekranie.
 * Jest wywoływana zawsze wtedy, gdy trzeba przerysować ekran - bufor ramki.
 */
void DrawScene(void)
{
	// Czyścimy okno aktualnym (domyślnym) kolorem oraz resetujemy bufor głębi 
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Resetujemy bieżącą macierz
	glLoadIdentity();

	// Definiujemy położenie obserwatora
	gluLookAt(viewer_pos[0], viewer_pos[1], viewer_pos[2], 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

	// Rysujemy osie układu
	DrawSceneAxes();

	// Zamieniamy bufory ramki
	glutSwapBuffers();

}

/* Ta funkcja jest wywoływana przez funkcję DrawScene.
 * Jej zadaniem jest rysowanie konkretnych obiektów osi układu
 * współrzędnych.
 */
void DrawSceneAxes(void)
{
	// Definiujemy nowy typ jako tablicę 3-elementową
	typedef float pt3d[3];

	// Początek i koniec osi X
	pt3d x_beg = { -10.0f, 0.0f, 0.0f };
	pt3d x_end = { 10.0f, 0.0f, 0.0f };

	// Poczatek i koniec osi Y
	pt3d y_beg = { 0.0f, -10.0f, 0.0f };
	pt3d y_end = { 0.0f,  10.0f, 0.0f };

	// Początek i koniec osi Z
	pt3d z_beg = { 0.0f, 0.0f, -10.0f };
	pt3d z_end = { 0.0f, 0.0f,  10.0f };

	// Rysujemy osie
	glBegin(GL_LINES);
	// Czerwony kolor dla osi X
	glColor3f(1.0f, 0.0f, 0.0f);
	glVertex3fv(x_beg);
	glVertex3fv(x_end);

	// Zielony kolor dla osi Y
	glColor3f(0.0f, 1.0f, 0.0f);
	glVertex3fv(y_beg);
	glVertex3fv(y_end);

	// Niebieski kolor dla osi Z
	glColor3f(0.0f, 0.0f, 1.0f);
	glVertex3fv(z_beg);
	glVertex3fv(z_end);
	glEnd();

	glColor3f(0.5f, 0.5f, 0.5f);
	// Jeśli wciśnięto lewy klawisz myszy
	if (lbutton_status == 1)
	{
		// Zwiększ kąt
		theta += x_delta * pixels2angle;
		theta2 += y_delta * pixels2angle;

	}
	// Obrót w okół osi y
	glRotatef(theta, 0.0f, 1.0f, 0.0f);
	glRotatef(theta2, 1.0f, 0.0f, 0.0f);

	if (rbutton_status == 1) {

		scale += 0.05f * y_delta;

	}
	glScalef(scale, scale, scale);

	glutWireTeapot(4.0);
}

/* Ta funkcja służy do wstępnej konfiguracji OpenGLa.
 * Zanim coś narysujemy musimy wywołać tę funkcję.
 */
void InitOpenGL(void)
{
	// Ustawiamy domyślny, czarny kolor tła okna - bufor ramki malujemy na czarno
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

/*Ta funkcja ustawia perspektywę - jej odpowiednikiem w starszych implementacjach openGL jest gluPerspective
*/
void perspectiveGL(GLdouble fovY, GLdouble aspect, GLdouble zNear, GLdouble zFar)
{
	const GLdouble pi = 3.1415926535897932384626433832795;
	GLdouble fW, fH;

	fH = tan(fovY / 360 * pi) * zNear;
	fW = fH * aspect;

	glFrustum(-fW, fW, -fH, fH, zNear, zFar);
}

/* Tę funkcję wywołuje system w momencie gdy użytkownik zmieni myszą
 * rozmiar głównego okna. jej zadaniem jest zachowanie proporcji wymiarów
 * rysowanych obiektów niezależnie od wymiarów okna.
 */
void ReshapeWindow(int width, int height)
{

	// Przeliczamy piksele na stopnie
	pixels2angle = 360.0f / (float)width;
	// Ustawiamy układ współrzędnych obserwatora
	glMatrixMode(GL_PROJECTION);

	// Resetujemy macierz projkecji 
	glLoadIdentity();

	// Ustawiamy perspektywę
	perspectiveGL(70.0, 1.0, 1.0, 20.0);

	// Korekta  
	if (width <= height)
		glViewport(0, (height - width) / 2, width, width);
	else
		glViewport((width - height) / 2, 0, height, height);

	// Ustawiamy macierz modelu
	glMatrixMode(GL_MODELVIEW);

	// Resetujemy macierz modelu
	glLoadIdentity();

}
/* Funkcja obsługująca mysz - bada stan klawiszy i ustawia odpowiednie zmienne */
void MouseFunc(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		// Zapamętujemy obecne położenie myszy
		x_last_pos = x;
		y_last_pos = y;

		// Przycisk lewy wcisnięty
		lbutton_status = 1;
	}
	else {
		// Przycisk jest zwolniony
		lbutton_status = 0;
	}

	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
	{
		// Zapamętujemy obecne położenie myszy

		y_last_pos = y;

		// Przycisk lewy wcisnięty
		rbutton_status = 1;
	}
	else {
		// Przycisk jest zwolniony
		rbutton_status = 0;
	}
}
/* Funkcja monitoruje położenie myszy i ustala odpowiednie zmienne */
void MouseMotion(GLsizei x, GLsizei y)
{
	// Wyliczamy aktualne przemieszczenie
	x_delta = x - x_last_pos;
	y_delta = y - y_last_pos;

	// Zapamiętujemy aktualne położenie
	x_last_pos = x;
	y_last_pos = y;

	// Odświeżamy okno
	glutPostRedisplay();
}
